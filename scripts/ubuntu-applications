#!/usr/bin/env bash

set -e

echo "Home directory: $HOME"

junk_applications=(
    "gnome-boxes"
    "gnome-calendar"
    "gnome-clocks"
    "gnome-contacts"
    "gnome-maps"
    "gnome-shell-extension-ubuntu-dock"
    "gnome-text-editor"
    "gnome-tour"
    "gnome-weather"
    "rhythmbox"
    "simple-scan"
    "yelp"
)

declare -A apt_applications
apt_applications=(
    ["file"]=""
    ["procps"]=""
    ["curl"]=""
    ["build-essential"]=""
    ["git"]=""
    ["snapd"]=""
    ["libfuse2"]=""
    ["zsh"]=""
    ["yadm"]=""
    ["xclip"]=""
    ["gnome-online-accounts"]=""
    ["gnome-shell-extensions"]=""
    ["gnome-shell-extension-manager"]=""
    ["gnome-tweaks"]=""
)

flatpak_applications=(
    "com.bitwig.BitwigStudio"
    "com.google.Chrome"
    "com.slack.Slack"
    "com.spotify.Client"
    "com.transmissionbt.Transmission"
    "md.obsidian.Obsidian"
    "org.videolan.VLC"
)

snap_applications=(
    "arduino"
    "ghostty"
    "yazi"
    "google-cloud-cli"
    "ticktick"
    "tuxguitar-vs"
)

declare -A app_image_applications
app_image_applications=(
    ["beeper"]="https://api.beeper.com/desktop/download/linux/x64/stable/com.automattic.beeper.desktop"
)

# Function to check if a package is installed
is_installed() {
    dpkg -s "$1" &> /dev/null
}

# Remove junk applications
for package in "${junk_applications[@]}"; do
    if is_installed "$package"; then
        echo "Removing $package..."
        sudo apt remove -y "$package"
    else
        echo "$package is not installed. Skipping..."
    fi
done

sudo apt update && sudo apt upgrade -y --allow-downgrades

# Install APT applications
for name in "${!apt_applications[@]}"; do
    repo=${apt_applications[$name]}
    if ! is_installed "$name"; then
        if [ -n "$repo" ]; then
            sudo add-apt-repository -y "$repo"
        fi
        echo "Installing $name..."
        sudo apt install -y "$name"
    else
        echo "$name is already installed. Skipping..."
    fi
done

# Install Flatpak if not already installed
if ! command -v flatpak &> /dev/null; then
    echo "Installing Flatpak..."
    sudo apt install -y flatpak
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
else
    echo "Flatpak is already installed. Skipping..."
fi

# Install Flatpak applications
for app in "${flatpak_applications[@]}"; do
    if ! flatpak list | grep -q "$app"; then
        echo "Installing $app..."
        flatpak install -y flathub "$app"
    else
        echo "$app is already installed. Skipping..."
    fi
done

# Install snap applications
for app in "${snap_applications[@]}"; do
    name=$(echo "$app" | cut -d' ' -f1)
    if ! snap list | grep -q "$name"; then
        echo "Installing $app..."
        sudo snap install "$app" --classic
    else
        echo "$app is already installed. Skipping..."
    fi
done

# Install AppImage applications
for name in "${!app_image_applications[@]}"; do
    url=${app_image_applications[$name]}
    if ! command -v "$name" &> /dev/null; then
        echo "Installing $name..."
        wget -O "/tmp/$name" "$url"
        chmod +x "/tmp/$name"
        sudo mv "/tmp/$name" "/usr/local/bin/$name"
    else
        echo "$name is already installed. Skipping..."
    fi
done

# Install Brew applications
if [ -f "$HOME/Brewfile" ]; then
    brew bundle
fi

create_desktop_file() {
    echo "Creating desktop file for $2..."
    local file_name="$1"
    local display_name="$2"
    local exec="$3"
    local icon="$4"
    local desktop_file="/usr/share/applications/${file_name}.desktop"

    sudo tee "$desktop_file" > /dev/null <<EOT
[Desktop Entry]
Name=$display_name
Exec=$exec
Icon=$icon
Terminal=false
Type=Application
Categories=Utility;
EOT
    echo "Desktop file created at $desktop_file"
}

# Create desktop files
echo "Creating desktop files..."
create_desktop_file "beeper" "Beeper" "/usr/local/bin/beeper --no-sandbox" "/home/bjorn/icons/beeper.png"

# Install external repository applications
install_app() {
    local name="$1"
    local key_url="$2"
    local repo_entry="$3"
    local package_name="${4:-$name}"

    if ! command -v "$name" >/dev/null 2>&1; then
        echo "Installing $name..."
        sudo mkdir -p /etc/apt/keyrings
        wget -qO- "$key_url" | sudo gpg --dearmor -o "/etc/apt/keyrings/${name}.gpg"
        echo "$repo_entry" | sudo tee "/etc/apt/sources.list.d/${name}.list" > /dev/null
        sudo apt update && sudo apt install -y "$package_name"
    fi
}

install_app "1password" \
    "https://downloads.1password.com/linux/keys/1password.asc" \
    "deb [arch=amd64 signed-by=/etc/apt/keyrings/1password.gpg] https://downloads.1password.com/linux/debian/amd64 stable main"

install_app "firefox" \
    "https://packages.mozilla.org/apt/repo-signing-key.gpg" \
    "deb [signed-by=/etc/apt/keyrings/firefox.gpg] https://packages.mozilla.org/apt mozilla main"

install_app "mise" \
    "https://mise.jdx.dev/gpg-key.pub" \
    "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main"

install_jetbrains_toolbox() {
    echo "Installing JetBrains Toolbox..."
    if [ -d ~/.local/share/JetBrains/Toolbox ]; then
        echo "JetBrains Toolbox is already installed!"
        return 0
    fi
    
    wget --show-progress -qO ./toolbox.tar.gz "https://data.services.jetbrains.com/products/download?platform=linux&code=TBA"
    
    TOOLBOX_TEMP_DIR=$(mktemp -d)
    tar -C "$TOOLBOX_TEMP_DIR" -xf toolbox.tar.gz
    rm ./toolbox.tar.gz
    
    "$TOOLBOX_TEMP_DIR"/*/jetbrains-toolbox
    rm -r "$TOOLBOX_TEMP_DIR"
    
    echo "JetBrains Toolbox was successfully installed!"
}

install_jetbrains_toolbox

sudo apt autoremove -y

echo "Done"
