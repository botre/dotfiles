#!/usr/bin/env node

const fs = require("fs").promises;
const path = require("path");
const {exec} = require("child_process");

const args = process.argv.slice(2);

const packageJsonName = "package.json";

const defaultPackageManager = "npm";

const lockFileNames = {
    npm: "package-lock.json",
    yarn: "yarn.lock",
};

const commandAliases = {
    codegen: ["codegen", "generate"],
    dev: ["dev", "develop"],
    format: ["format", "fmt", "prettier"],
    fmt: ["format", "fmt", "prettier"],
    lint: ["eslint", "lint"],
    tc: ["check-types", "tc", "typecheck"],
    typecheck: ["check-types", "tc", "typecheck"],
};

async function fileExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

async function getPackageJson() {
    try {
        const cwd = process.cwd();
        const packageJsonPath = path.join(cwd, packageJsonName);
        const packageJson = await fs.readFile(packageJsonPath, "utf8");
        return JSON.parse(packageJson);
    } catch (error) {
        console.error(`Error reading ${packageJsonName}:`, error);
        process.exit(1);
    }
}

async function detectPackageManager() {
    const cwd = process.cwd();
    for (let [packageManager, lockFileName] in lockFileNames) {
        const lockFilePath = path.join(cwd, lockFileName);
        if (await fileExists(lockFilePath)) {
            return packageManager;
        }
    }
    const packageJson = await getPackageJson();
    if (packageJson) {
        console.warn(
            `Found package.json but no lock file, assuming ${defaultPackageManager}`,
        );
        return defaultPackageManager;
    }
    return null;
}

function executeScript(command, script) {
    const commandToRun = `${command} run ${script} `;
    exec(commandToRun, (error, stdout) => {
        if (error) {
            console.error(error);
            return;
        }
        console.log(stdout);
    });
}

async function processCommand(args) {
    const [command] = args;
    if (!command) {
        console.log("No command provided");
        return;
    }
    const packageManager = await detectPackageManager();
    if (!packageManager) {
        console.log("No package manager detected");
        return;
    }
    const packageJson = await getPackageJson();
    const scripts = packageJson.scripts;
    const aliases = commandAliases[command];
    for (let alias in aliases) {
        if (scripts[alias]) {
            executeScript(packageManager, alias);
            return;
        }
    }
    console.log(`Unknown command: ${command}`);
}

processCommand(args);
